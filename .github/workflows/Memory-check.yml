name: macOS Memory Performance Benchmark

on:
  workflow_dispatch:

jobs:
  performance:
    name: macOS Performance Benchmark
    strategy:
      matrix:
        os: [ macos-13, macos-14, macos-15 ]
    runs-on: ${{ matrix.os }}
    steps:
  
    - name: Install sysbench
      shell: bash
      run: brew install sysbench

    - name: Memory Metrics Test
      shell: bash
      id: memory_metrics
      run: |
        echo "========================================"
        echo "üöÄ Memory Metrics Test Started"
        echo "========================================"
        
        # Get total memory directly from macOS system info
        total_memory_bytes=$(sysctl -n hw.memsize)
        total_memory_gb=$(sysctl -n hw.memsize | awk '{print $1 / 1024 / 1024 / 1024}')
        echo "Detected Total Memory: ${total_memory_gb} GB"
        
        # Detect correct page size (macOS 15 uses 16K pages)
        page_size=$(sysctl -n hw.pagesize)
        echo "Detected Page Size: $page_size bytes"
        
        # Get free memory from vm_stat
        vm_stat_output=$(vm_stat)
        pages_free=$(echo "$vm_stat_output" | awk '/Pages free/ {gsub("\\.","",$3); print $3}')
        free_memory_bytes=$((pages_free * page_size))
        free_memory_mb=$((free_memory_bytes / 1024 / 1024))
        
        # Compute used memory correctly
        used_memory_mb=$(( (total_memory_bytes - free_memory_bytes) / 1024 / 1024 ))
        
        # Ensure total memory is valid before calculating percentage
        if [ "$total_memory_bytes" -gt 0 ]; then
          used_percentage=$(( (used_memory_mb * 100) / (total_memory_bytes / 1024 / 1024) ))
        else
          used_percentage=0
        fi
        
        # Reserve memory for the runner (1GB recommended)
        runner_reserved_memory_mb=1024  # 1GB reserved for system processes
        adjusted_memory_mb=$(( (total_memory_bytes / 1024 / 1024) - runner_reserved_memory_mb ))
        
        # Ensure adjusted memory does not go below a safe limit (2GB)
        safe_memory_limit_mb=2048
        if [ "$adjusted_memory_mb" -lt "$safe_memory_limit_mb" ]; then
          adjusted_memory_mb=$safe_memory_limit_mb
        fi
        
        # Print memory details
        echo "üñ•Ô∏è Total Memory: ${total_memory_gb} GB"
        echo "üÜì Free Memory: ${free_memory_mb} MB"
        echo "üî• Memory Used: ${used_memory_mb} MB"
        echo "üìä Memory Usage Percentage: $used_percentage%"
        echo "‚ö†Ô∏è Reserved Memory for Runner: ${runner_reserved_memory_mb} MB"
        echo "‚úÖ Memory Available for Tests: ${adjusted_memory_mb} MB"
        
        # Check if memory usage is too high (above 70%)
        memory_usage_limit=70
        if [ "$used_percentage" -gt "$memory_usage_limit" ]; then
          echo "‚ö†Ô∏è WARNING: Memory usage is above ${memory_usage_limit}%! (${used_percentage}%)"
          echo "‚ö†Ô∏è Consider reducing memory usage before running tests."
        fi
        
        # Store values in GitHub Actions environment variables
        echo "TOTAL_MEMORY=$adjusted_memory_mb" >> $GITHUB_ENV
        echo "USED_PERCENTAGE=$used_percentage" >> $GITHUB_ENV


    # - name: Benchmark Memory Read Speed
    #   shell: bash
    #   run: |
    #     echo "Benchmarking memory read speed..."
    #     sysbench memory --memory-block-size=1M --memory-total-size=${{ env.TOTAL_MEMORY }}M --memory-oper=read run | tee benchmark_read.txt
    - name: Benchmark Memory Read Speed
      shell: bash
      run: |
        echo "Benchmarking memory read speed..."
        
        START_TIME=$(date +%s)  # Capture start time
        
        sysbench memory --memory-block-size=1M --memory-total-size=${{ env.TOTAL_MEMORY }}M --memory-oper=read run | tee benchmark_read.txt
        
        END_TIME=$(date +%s)  # Capture end time
        EXECUTION_TIME=$((END_TIME - START_TIME))  # Calculate elapsed time
        
        echo "Execution Time: $EXECUTION_TIME seconds"
    
        # Extract throughput value (remove parentheses and keep only the number)
        THROUGHPUT=$(grep "MiB transferred" benchmark_read.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
        
        # Print extracted value
        echo "Extracted Memory Read Throughput: ${THROUGHPUT} MB/sec"
        
        # Define minimum expected throughput
        MIN_THROUGHPUT=500
        
        # Check if throughput is valid and numeric using bc for floating point comparison
        if [[ -z "$THROUGHPUT" || ! "$THROUGHPUT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "‚ö†Ô∏è Warning: Could not extract a valid memory read speed."
        elif (( $(echo "$THROUGHPUT < $MIN_THROUGHPUT" | bc -l) )); then
            echo "‚ö†Ô∏è Warning: Memory read speed is below the expected threshold: ${THROUGHPUT} MB/sec (Expected: ${MIN_THROUGHPUT} MB/sec)"
        else
            echo "‚úÖ Memory read speed: ${THROUGHPUT} MB/sec (Threshold: ${MIN_THROUGHPUT} MB/sec)"
        fi
            
        # Export variables for telemetry tracking
        echo "EXECUTION_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "THROUGHPUT=$THROUGHPUT" >> $GITHUB_ENV
    
        echo "Benchmark completed!"
        
        exit 0  # Ensure script always exits successfully



    # - name: Benchmark Memory Write Speed
    #   shell: bash
    #   run: |
    #     echo "Benchmarking memory write speed..."
    #     sysbench memory --memory-block-size=1M --memory-total-size=${{ env.TOTAL_MEMORY }}M --memory-oper=write run | tee benchmark_write.txt
    - name: Benchmark Memory Write Speed
      shell: bash
      run: |
        echo "Benchmarking memory write speed..."
        
        START_TIME=$(date +%s)  # Capture start time
        
        sysbench memory --memory-block-size=1M --memory-total-size=${{ env.TOTAL_MEMORY }}M --memory-oper=write run | tee benchmark_write.txt
        
        END_TIME=$(date +%s)  # Capture end time
        EXECUTION_TIME=$((END_TIME - START_TIME))  # Calculate elapsed time
        
        echo "Execution Time: $EXECUTION_TIME seconds"
    
        # Extract throughput value (remove parentheses and keep only the number)
        THROUGHPUT=$(grep "MiB transferred" benchmark_write.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
        
        # Print extracted value
        echo "Extracted Memory Write Throughput: ${THROUGHPUT} MB/sec"
        
        # Define minimum expected throughput
        MIN_THROUGHPUT=500
        
        # Check if throughput is valid and numeric using bc for floating point comparison
        if [[ -z "$THROUGHPUT" || ! "$THROUGHPUT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "‚ö†Ô∏è Warning: Could not extract a valid memory read speed."
        elif (( $(echo "$THROUGHPUT < $MIN_THROUGHPUT" | bc -l) )); then
            echo "‚ö†Ô∏è Warning: Memory write speed is below the expected threshold: ${THROUGHPUT} MB/sec (Expected: ${MIN_THROUGHPUT} MB/sec)"
        else
            echo "‚úÖ Memory write speed: ${THROUGHPUT} MB/sec (Threshold: ${MIN_THROUGHPUT} MB/sec)"
        fi
    
        # Export variables for telemetry tracking
        echo "EXECUTION_TIME_WRITE=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "THROUGHPUT_WRITE=$THROUGHPUT" >> $GITHUB_ENV
    
        echo "Benchmark completed!"


    - name: Basic Memory Benchmark
      shell: bash
      run: |
        sysbench memory run

    # - name: Customizing Block Size & Total Memory
    #   shell: bash
    #   run: |
    #     sysbench memory --memory-block-size=1M --memory-total-size=10G run
    - name: Customizing Block Size & Total Memory
      shell: bash
      run: |
        echo "============================================"
        echo "üöÄ Starting Memory Benchmark Test with Custom Block Size & Total Memory"
        echo "============================================"
    
        # Define test parameters
        MEMORY_BLOCK_SIZE="1M"
        TOTAL_MEMORY="10G"
        MIN_THROUGHPUT=500  # Minimum acceptable throughput in MB/sec
    
        # Run sysbench memory benchmark
        START_TIME=$(date +%s)
        sysbench memory --memory-block-size=$MEMORY_BLOCK_SIZE --memory-total-size=$TOTAL_MEMORY run | tee memory_test.txt
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
    
        echo "Execution Time: $EXECUTION_TIME seconds"
    
        # Extract Memory Throughput (MB/sec)
        THROUGHPUT=$(grep "MiB transferred" memory_test.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
    
        # Validate throughput extraction
        if [[ -z "$THROUGHPUT" || ! "$THROUGHPUT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "‚ö†Ô∏è Warning: Could not extract a valid memory throughput value."
            THROUGHPUT=0  # Default to 0 if extraction fails
        else
            echo "‚úÖ Extracted Memory Throughput: ${THROUGHPUT} MB/sec"
        fi
    
        # Performance validation check
        if [[ $(echo "$THROUGHPUT < $MIN_THROUGHPUT" | bc -l) -eq 1 ]]; then
            echo "‚ö†Ô∏è Warning: Memory throughput ($THROUGHPUT MB/sec) is below the expected threshold ($MIN_THROUGHPUT MB/sec)."
        else
            echo "‚úÖ Memory throughput is within acceptable limits."
        fi
    
        # Export metrics for logging
        echo "EXECUTION_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "THROUGHPUT=$THROUGHPUT" >> $GITHUB_ENV
    
        echo "============================================"
        echo "‚úÖ Memory Benchmark Completed"
        echo "============================================"

    # - name: Multi-Threaded Memory Test
    #   shell: bash
    #   run: |
    #     sysbench memory --memory-block-size=1M --memory-total-size=${{ env.TOTAL_MEMORY }}M --memory-oper=read --threads=8 run
    #     sysbench memory --memory-block-size=1M --memory-total-size=${{ env.TOTAL_MEMORY }}M --memory-oper=write --threads=8 run
    - name: Multi-Threaded Memory Test
      shell: bash
      run: |
        echo "============================================"
        echo "üöÄ Starting Multi-Threaded Memory Test (8 Threads)"
        echo "============================================"
    
        # Define test parameters
        MEMORY_BLOCK_SIZE="1M"
        TOTAL_MEMORY="${{ env.TOTAL_MEMORY }}M"
        MIN_THROUGHPUT=500  # Minimum acceptable throughput in MB/sec
    
        # Run memory read test
        echo "üìå Running Multi-Threaded Memory Read Test..."
        START_TIME=$(date +%s)
        sysbench memory --memory-block-size=$MEMORY_BLOCK_SIZE --memory-total-size=$TOTAL_MEMORY --memory-oper=read --threads=8 run | tee memory_read.txt
        END_TIME=$(date +%s)
        EXECUTION_TIME_READ=$((END_TIME - START_TIME))
        MEMORY_READ_SPEED=$(grep "MiB transferred" memory_read.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
    
        # Validate read throughput extraction
        if [[ -z "$MEMORY_READ_SPEED" || ! "$MEMORY_READ_SPEED" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "‚ö†Ô∏è Warning: Could not extract a valid memory read throughput."
            MEMORY_READ_SPEED=0
        else
            echo "‚úÖ Extracted Multi-Threaded Memory Read Throughput: ${MEMORY_READ_SPEED} MB/sec"
        fi
    
        # Run memory write test
        echo "üìå Running Multi-Threaded Memory Write Test..."
        START_TIME=$(date +%s)
        sysbench memory --memory-block-size=$MEMORY_BLOCK_SIZE --memory-total-size=$TOTAL_MEMORY --memory-oper=write --threads=8 run | tee memory_write.txt
        END_TIME=$(date +%s)
        EXECUTION_TIME_WRITE=$((END_TIME - START_TIME))
        MEMORY_WRITE_SPEED=$(grep "MiB transferred" memory_write.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
    
        # Validate write throughput extraction
        if [[ -z "$MEMORY_WRITE_SPEED" || ! "$MEMORY_WRITE_SPEED" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "‚ö†Ô∏è Warning: Could not extract a valid memory write throughput."
            MEMORY_WRITE_SPEED=0
        else
            echo "‚úÖ Extracted Multi-Threaded Memory Write Throughput: ${MEMORY_WRITE_SPEED} MB/sec"
        fi
    
        # Performance validation check for read
        if [[ $(echo "$MEMORY_READ_SPEED < $MIN_THROUGHPUT" | bc -l) -eq 1 ]]; then
            echo "‚ö†Ô∏è Warning: Multi-threaded memory read speed ($MEMORY_READ_SPEED MB/sec) is below the expected threshold ($MIN_THROUGHPUT MB/sec)."
        else
            echo "‚úÖ Multi-threaded memory read speed is within acceptable limits."
        fi
    
        # Performance validation check for write
        if [[ $(echo "$MEMORY_WRITE_SPEED < $MIN_THROUGHPUT" | bc -l) -eq 1 ]]; then
            echo "‚ö†Ô∏è Warning: Multi-threaded memory write speed ($MEMORY_WRITE_SPEED MB/sec) is below the expected threshold ($MIN_THROUGHPUT MB/sec)."
        else
            echo "‚úÖ Multi-threaded memory write speed is within acceptable limits."
        fi
    
        # Calculate total execution time
        TOTAL_EXECUTION_TIME=$((EXECUTION_TIME_READ + EXECUTION_TIME_WRITE))
    
        # Export results for further analysis
        echo "EXECUTION_TIME=$TOTAL_EXECUTION_TIME" >> $GITHUB_ENV
        echo "THROUGHPUT_READ=$MEMORY_READ_SPEED" >> $GITHUB_ENV
        echo "THROUGHPUT_WRITE=$MEMORY_WRITE_SPEED" >> $GITHUB_ENV
    
        echo "============================================"
        echo "‚úÖ Multi-Threaded Memory Test Completed"
        echo "============================================"

    # - name: Running for a Fixed Time
    #   shell: bash
    #   run: |
    #     sysbench memory --memory-block-size=1M --memory-total-size=0 --memory-oper=read --threads=8 --time=30 run
    #     sysbench memory --memory-block-size=1M --memory-total-size=0 --memory-oper=write --threads=8 --time=30 run
    - name: Running for a Fixed Time
      shell: bash
      run: |
        echo "============================================"
        echo "üöÄ Running Memory Benchmark for a Fixed Time (30 seconds per test)"
        echo "============================================"
    
        # Define test parameters
        MEMORY_BLOCK_SIZE="1M"
        THREADS=8
        TEST_DURATION=30  # Run test for 30 seconds
        MIN_THROUGHPUT=500  # Minimum acceptable throughput in MB/sec
    
        # Run memory read test
        echo "üìå Running Memory Read Test for $TEST_DURATION seconds..."
        START_TIME=$(date +%s)
        sysbench memory --memory-block-size=$MEMORY_BLOCK_SIZE --memory-total-size=0 --memory-oper=read --threads=$THREADS --time=$TEST_DURATION run | tee memory_read_fixed.txt
        END_TIME=$(date +%s)
        EXECUTION_TIME_READ=$((END_TIME - START_TIME))
        MEMORY_READ_SPEED=$(grep "MiB transferred" memory_read_fixed.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
    
        # Validate read throughput extraction
        if [[ -z "$MEMORY_READ_SPEED" || ! "$MEMORY_READ_SPEED" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "‚ö†Ô∏è Warning: Could not extract a valid memory read throughput."
            MEMORY_READ_SPEED=0
        else
            echo "‚úÖ Extracted Memory Read Throughput: ${MEMORY_READ_SPEED} MB/sec"
        fi
    
        # Run memory write test
        echo "üìå Running Memory Write Test for $TEST_DURATION seconds..."
        START_TIME=$(date +%s)
        sysbench memory --memory-block-size=$MEMORY_BLOCK_SIZE --memory-total-size=0 --memory-oper=write --threads=$THREADS --time=$TEST_DURATION run | tee memory_write_fixed.txt
        END_TIME=$(date +%s)
        EXECUTION_TIME_WRITE=$((END_TIME - START_TIME))
        MEMORY_WRITE_SPEED=$(grep "MiB transferred" memory_write_fixed.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
    
        # Validate write throughput extraction
        if [[ -z "$MEMORY_WRITE_SPEED" || ! "$MEMORY_WRITE_SPEED" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "‚ö†Ô∏è Warning: Could not extract a valid memory write throughput."
            MEMORY_WRITE_SPEED=0
        else
            echo "‚úÖ Extracted Memory Write Throughput: ${MEMORY_WRITE_SPEED} MB/sec"
        fi
    
        # Performance validation check for read
        if [[ $(echo "$MEMORY_READ_SPEED < $MIN_THROUGHPUT" | bc -l) -eq 1 ]]; then
            echo "‚ö†Ô∏è Warning: Memory read speed ($MEMORY_READ_SPEED MB/sec) is below the expected threshold ($MIN_THROUGHPUT MB/sec)."
        else
            echo "‚úÖ Memory read speed is within acceptable limits."
        fi
    
        # Performance validation check for write
        if [[ $(echo "$MEMORY_WRITE_SPEED < $MIN_THROUGHPUT" | bc -l) -eq 1 ]]; then
            echo "‚ö†Ô∏è Warning: Memory write speed ($MEMORY_WRITE_SPEED MB/sec) is below the expected threshold ($MIN_THROUGHPUT MB/sec)."
        else
            echo "‚úÖ Memory write speed is within acceptable limits."
        fi
    
        # Calculate total execution time
        TOTAL_EXECUTION_TIME=$((EXECUTION_TIME_READ + EXECUTION_TIME_WRITE))
    
        # Export results for further analysis
        echo "EXECUTION_TIME=$TOTAL_EXECUTION_TIME" >> $GITHUB_ENV
        echo "THROUGHPUT_READ=$MEMORY_READ_SPEED" >> $GITHUB_ENV
        echo "THROUGHPUT_WRITE=$MEMORY_WRITE_SPEED" >> $GITHUB_ENV
    
        echo "============================================"
        echo "‚úÖ Memory Benchmark for Fixed Time Completed"
        echo "============================================"

    # - name: Extreme Stress Test
    #   shell: bash
    #   run: |
    #     echo "‚ö†Ô∏è Running an extreme memory stress test! This may take a long time."
    #     sysbench memory --memory-block-size=4M --memory-total-size=100G --memory-oper=write --threads=16 run || echo "‚ö†Ô∏è Test may have failed due to system limits."
    #     echo "========================================"
    #     echo "üöÄ Memory Metrics Test End"
    #     echo "========================================"
    - name: Extreme Stress Test
      shell: bash
      run: |
          echo "========================================"
          echo "‚ö†Ô∏è Running an EXTREME memory stress test! This may take a long time."
          echo "========================================"
      
          # Define test parameters
          MEMORY_BLOCK_SIZE="4M"
          TOTAL_MEMORY="100G"
          THREADS=16
          MIN_THROUGHPUT=1000  # Minimum acceptable throughput in MB/sec
      
          # Start timer
          START_TIME=$(date +%s)
      
          # Run stress test and capture logs
          sysbench memory --memory-block-size=$MEMORY_BLOCK_SIZE --memory-total-size=$TOTAL_MEMORY --memory-oper=write --threads=$THREADS run | tee memory_stress_test.txt
          EXIT_STATUS=$?
      
          # End timer
          END_TIME=$(date +%s)
          EXECUTION_TIME=$((END_TIME - START_TIME))
      
          # Check if the test failed
          if [[ $EXIT_STATUS -ne 0 ]]; then
              echo "‚ùå Memory stress test failed due to system limits or OOM (Out of Memory) conditions."
              THROUGHPUT=0
          else
              # Extract Memory Throughput (MB/sec)
              THROUGHPUT=$(grep "MiB transferred" memory_stress_test.txt | awk -F'[()]' '{print $2}' | awk '{print $1}')
      
              # Validate throughput extraction
              if [[ -z "$THROUGHPUT" || ! "$THROUGHPUT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                  echo "‚ö†Ô∏è Warning: Could not extract a valid memory throughput value."
                  THROUGHPUT=0
              else
                  echo "‚úÖ Extracted Memory Write Throughput: ${THROUGHPUT} MB/sec"
              fi
          fi
      
          # Performance validation check
          if [[ $(echo "$THROUGHPUT < $MIN_THROUGHPUT" | bc -l) -eq 1 ]]; then
              echo "‚ö†Ô∏è Warning: Memory write speed ($THROUGHPUT MB/sec) is below the expected threshold ($MIN_THROUGHPUT MB/sec)."
          else
              echo "‚úÖ Memory write speed is within acceptable limits."
          fi
      
          # Store metrics in environment variables
          echo "EXECUTION_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
          echo "THROUGHPUT=$THROUGHPUT" >> $GITHUB_ENV
      
          echo "========================================"
          echo "‚úÖ Memory Stress Test Completed"
          echo "========================================"

        
 # ------------------------------- CPU Disk I/O Test cases --------------------
 
    - name: Monitor CPU performance
      shell: bash
      run: |
        echo "Monitor number of CPU in our VM"
        sysctl hw.physicalcpu hw.logicalcpu
        echo "Monitor CPU using top"
        top -l 1 -n 10 -s 1

    - name: Measure Disk I/O speed using dd
      shell: bash
      run: |
        echo "Testing write speed using dd..."
        dd if=/dev/zero of=testfile bs=1m count=1024 oflag=direct

    - name: Calculate Disk I/O Operations
      shell: bash
      run: |
        echo "Generating disk write activity before measuring..."
        dd if=/dev/zero of=./testfile bs=2M count=10000 oflag=sync &
        sleep 5
        echo "Calculating number of disk I/O operations..."
        disk_name=$(iostat -d | awk 'NR==3 {print $1}')
        if [ -z "$disk_name" ]; then
          echo "Error: No disk found!"
          exit 1
        fi
        iostat -d $disk_name 1 5 | awk -v disk="$disk_name" '
          BEGIN {reads=0; writes=0; count=0}
          $1 == disk {reads+=$3; writes+=$4; count++}
          END {
            if (count > 0) {
              print "Average Reads/s:", reads/count, "Average Writes/s:", writes/count;
            } else {
              print "Error: No disk activity detected!";
            }
          }
        '
 # ------------------------------- CPU stress Test cases --------------------
 
    - name: Install stress tools (macOS)
      shell: bash
      run: |
        brew install stress-ng

    - name: Run CPU Stress Test
      shell: bash
      run: |
        echo "========================================"
        echo "üöÄ CPU Metrics Test Started"
        echo "========================================"
        stress-ng --cpu 4 --cpu-method matrixprod --cpu-ops 200 --metrics-brief --verbose
        stress-ng --cpu 4 --cpu-method ackermann --cpu-ops 200 --metrics-brief --verbose
        stress-ng --cpu 4 --cpu-method fibonacci --cpu-ops 200 --metrics-brief --verbose
        stress-ng --cpu 4 --cpu-method prime --cpu-ops 200 --metrics-brief --verbose
        stress-ng --cpu 4 --cpu-method sieve --cpu-ops 200 --metrics-brief --verbose
        stress-ng --cpu 4 --cpu-method bitops --cpu-ops 200 --metrics-brief --verbose
        echo "========================================"
        echo "üöÄ CPU Metrics Test End"
        echo "========================================"
 # ------------------------------- Memory stress Test cases --------------------
    - name: Run Incremental Memory Stress Test
      shell: bash
      continue-on-error: true  # Allows next steps to execute even if this one fails
      run: |
          VM_OPS_START=200  # Initial value
          VM_OPS_INCREMENT=100  # Step increment
          VM_OPS_MAX=2000  # Maximum limit
          VM_BYTES=2G  # Memory allocation
          LOG_FILE="stress_test_results.log"
      
          echo "Starting incremental memory stress test..." | tee $LOG_FILE
      
          for ((vm_ops=$VM_OPS_START; vm_ops<=$VM_OPS_MAX; vm_ops+=$VM_OPS_INCREMENT)); do
            echo "Running stress-ng with --vm-ops=$vm_ops" | tee -a $LOG_FILE
      
            if stress-ng --vm 2 --vm-bytes $VM_BYTES --vm-ops $vm_ops --metrics-brief --verbose; then
              echo "‚úÖ Passed: --vm-ops=$vm_ops" | tee -a $LOG_FILE
            else
              echo "‚ùå Failed: --vm-ops=$vm_ops" | tee -a $LOG_FILE
              echo "‚ö†Ô∏è Stopping further increments as failure occurred at --vm-ops=$vm_ops" | tee -a $LOG_FILE
              break  # Stops increasing vm-ops but allows next workflow steps to run
            fi
      
            echo "---------------------------------------------" | tee -a $LOG_FILE
          done
      
          echo "Stress test completed. Check $LOG_FILE for details." | tee -a $LOG_FILE
 # ------------------------------- Disk stress Test cases --------------------
    # - name: Run Disk Stress Test
    #   shell: bash
    #   run: |
    #     stress-ng --hdd 2 --hdd-bytes 5G --hdd-ops 200 --metrics-brief --verbose
     # Add Incremental CPU Stress Test here
    - name: Run Incremental CPU Stress Test
      shell: bash
      continue-on-error: true  # Allows next steps to execute even if this one fails
      run: |
          # Get the number of CPU cores available on the system (for macOS)
          CPU_CORES=$(sysctl -n hw.physicalcpu)  # macOS command to get the number of physical CPU cores
          echo "Detected $CPU_CORES CPU cores."
        
          # Define the starting and maximum stressors and the increment
          CPU_CORES_START=2        # Start with 2 CPU stressors
          CPU_CORES_INCREMENT=2    # Increase by 2 each iteration
          CPU_CORES_MAX=$CPU_CORES # Maximum number of CPU stressors (set to the number of cores detected)
        
          # Set initial operations per stressor. This can be dynamically calculated based on the number of cores.
          BASE_CPU_OPS=1000         # Base number of operations per stressor for initial low load
          CPU_OPS=$((BASE_CPU_OPS * CPU_CORES))  # Multiply base operations with the number of cores to increase load with more stressors
          LOG_FILE="cpu_stress_results.log"  # Log file for results
        
          echo "Testing with stressors from $CPU_CORES_START to $CPU_CORES_MAX (based on $CPU_CORES cores)." | tee -a $LOG_FILE
          echo "Initial operations per stressor: $CPU_OPS" | tee -a $LOG_FILE
        
          # Incrementally increase CPU stressors and operations per stressor
          for ((cpu_cores=$CPU_CORES_START; cpu_cores<=$CPU_CORES_MAX; cpu_cores+=$CPU_CORES_INCREMENT)); do
              # Set the number of stressors to twice the number of cores
              CPU_STRESSORS=$((cpu_cores * 2))  # Increase stressors to double the number of cores
        
              # Adjust operations based on the number of cores for higher load
              CPU_OPS=$((BASE_CPU_OPS * CPU_STRESSORS))  # Increasing number of operations with stressor count
        
              echo "Running stress-ng with --cpu $CPU_STRESSORS --cpu-ops $CPU_OPS" | tee -a $LOG_FILE
        
              # Run the CPU stress test with increasing CPU stressors
              if stress-ng --cpu $CPU_STRESSORS --cpu-method matrixprod --cpu-ops $CPU_OPS --metrics-brief --verbose; then
                  echo "‚úÖ Passed: --cpu=$CPU_STRESSORS with $CPU_OPS operations" | tee -a $LOG_FILE
              else
                  echo "‚ùå Failed: --cpu=$CPU_STRESSORS with $CPU_OPS operations" | tee -a $LOG_FILE
                  echo "‚ö†Ô∏è Stopping further increments as failure occurred at --cpu=$CPU_STRESSORS" | tee -a $LOG_FILE
                  break  # Stop the test if failure occurs
              fi
        
              echo "---------------------------------------------" | tee -a $LOG_FILE
          done
        
          echo "CPU Stress test completed. Check $LOG_FILE for details." | tee -a $LOG_FILE
          

          

      # Add Incremental Disk i/o Stress Test here
    - name: Run Incremental Disk I/O Stress Test
      shell: bash
      continue-on-error: true  # Allows next steps to execute even if this one fails
      run: |
          # Define test parameters
          DISK_OPS_START=1000        # Start with 1000 disk operations
          DISK_OPS_INCREMENT=1000    # Increase by 1000 disk operations each iteration
          DISK_OPS_MAX=10000        # Maximum number of disk operations (adjust as needed)
          DISK_SIZE=4G              # Size of the test file to use for stress
          LOG_FILE="disk_stress_results.log"  # Log file for results

          echo "Starting incremental disk I/O stress test..." | tee $LOG_FILE
          
          # Create an initial test file
          dd if=/dev/zero of=./testfile bs=1M count=1024 oflag=direct
          sync  # Ensure disk write is flushed

          # Loop for disk I/O stress test with increasing operations
          for ((disk_ops=$DISK_OPS_START; disk_ops<=$DISK_OPS_MAX; disk_ops+=$DISK_OPS_INCREMENT)); do
              echo "Running disk I/O stress with $disk_ops operations" | tee -a $LOG_FILE

              # Use dd to stress the disk by writing and reading data
              dd if=/dev/zero of=./testfile bs=1M count=$disk_ops oflag=direct 2>&1 | tee -a $LOG_FILE
              sync  # Ensure disk write is flushed
              sleep 2

              # Measure the performance using iostat to capture disk I/O stats
              echo "Calculating disk I/O operations..." | tee -a $LOG_FILE
              iostat -d 1 10 | tee -a $LOG_FILE

              # Check disk I/O operations (Reads/Writes)
              iostat_output=$(iostat -d | awk 'NR>2 {print $1 " reads=" $3 " writes=" $4}')
              echo "Disk I/O stats for current iteration:" | tee -a $LOG_FILE
              echo "$iostat_output" | tee -a $LOG_FILE
              
              # Log if any issues with disk performance
              if [[ $iostat_output == *"NaN"* ]]; then
                echo "‚ùå Error: Disk performance issue detected!" | tee -a $LOG_FILE
                break  # Stop the test if performance issues are detected
              fi

              echo "---------------------------------------------" | tee -a $LOG_FILE
          done

          # Clean up: remove the test file
          rm -f ./testfile
          echo "Disk stress test completed. Check $LOG_FILE for details." | tee -a $LOG_FILE

          
      #memory read write stress test
    - name: Run Incremental Memory Read/Write Stress Test
      shell: bash
      continue-on-error: true  # Allows next steps to execute even if this one fails
      run: |
          # Define test parameters
          MEM_OPS_START=1000        # Start with 1000 memory read/write operations
          MEM_OPS_INCREMENT=1000    # Increase by 1000 operations each iteration
          MEM_OPS_MAX=10000        # Maximum number of operations
          MEM_SIZE=2G              # Starting size of memory to stress
          LOG_FILE="memory_stress_results.log"  # Log file for results
      
          echo "Starting incremental memory read/write stress test..." | tee $LOG_FILE
      
          # Loop for memory read/write stress test with increasing operations
          for ((mem_ops=$MEM_OPS_START; mem_ops<=$MEM_OPS_MAX; mem_ops+=$MEM_OPS_INCREMENT)); do
              echo "Running stress-ng with --vm 2 --vm-bytes $MEM_SIZE --vm-ops $mem_ops" | tee -a $LOG_FILE
      
              # Run the memory stress test with increasing memory operations
              if stress-ng --vm 2 --vm-bytes $MEM_SIZE --vm-ops $mem_ops --metrics-brief --verbose; then
                  echo "‚úÖ Passed: --vm-ops=$mem_ops with $MEM_SIZE allocated memory" | tee -a $LOG_FILE
              else
                  echo "‚ùå Failed: --vm-ops=$mem_ops with $MEM_SIZE allocated memory" | tee -a $LOG_FILE
                  echo "‚ö†Ô∏è Stopping further increments as failure occurred at --vm-ops=$mem_ops" | tee -a $LOG_FILE
                  break  # Stop the test if failure occurs
              fi
      
              echo "---------------------------------------------" | tee -a $LOG_FILE
          done
      
          echo "Memory Read/Write stress test completed. Check $LOG_FILE for details." | tee -a $LOG_FILE
      
 # ------------------------------- Network stress Test cases --------------------
    - name: Run Network Stress Test
      shell: bash
      run: |
        stress-ng --sock 2 --sock-ops 200 --metrics-brief --verbose
 # ------------------------------- File stress Test cases --------------------
    - name: Run File System Stress Test
      shell: bash
      run: |
        stress-ng --fallocate 2 --fallocate-ops 200 --metrics-brief --verbose      
 # ------------------------------- Boot time Test cases --------------------
    - name: Measure Boot Time
      shell: bash
      run: |
        echo "Checking boot time..."
        system_profiler SPSoftwareDataType | grep "Time since boot"
        
    - name: Check CPU Load Threshold
      shell: bash
      continue-on-error: true  # Ensures workflow does not fail
      run: |
        echo "========================================"
        echo "üöÄ Checking CPU Load..."
        echo "========================================"
    
        # Get CPU Load Percentage (User + System Load)
        cpu_load=$(top -l 1 | awk -F'[:,]' '/CPU usage/ {print $2 + $4}' | tr -d ' ')
    
        echo "üñ•Ô∏è Current CPU Load: ${cpu_load}%"
    
        # Check CPU load thresholds
        cpu_threshold_warning=70
        cpu_threshold_critical=90
    
        if (( $(echo "$cpu_load > $cpu_threshold_critical" | bc -l) )); then
          echo "üö® WARNING: High CPU Load Detected! ($cpu_load%) Exceeding ${cpu_threshold_critical}% threshold."
          echo "‚ö†Ô∏è Please investigate possible performance bottlenecks."
        elif (( $(echo "$cpu_load > $cpu_threshold_warning" | bc -l) )); then
          echo "‚ö†Ô∏è Warning: CPU Load is High ($cpu_load%), exceeding ${cpu_threshold_warning}%."
        else
          echo "‚úÖ CPU Load is Normal ($cpu_load%)"
        fi
    
        # Store CPU Load in GitHub Environment Variable
        echo "CPU_LOAD=$cpu_load" >> $GITHUB_ENV

    - name: Add Memory Threshold
      shell: bash
      continue-on-error: true  # Ensures workflow continues even if memory usage is high
      run: |
        echo "========================================"
        echo "üöÄ Checking Memory Usage..."
        echo "========================================"
        
        memory_threshold_warning=70
        memory_threshold_critical=90  # Adjust this if needed
    
        echo "üñ•Ô∏è Current Memory Usage: $USED_PERCENTAGE%"
    
        if [ "$USED_PERCENTAGE" -gt "$memory_threshold_critical" ]; then
          echo "üö® CRITICAL: Memory usage is too high! ($USED_PERCENTAGE%) Exceeding ${memory_threshold_critical}% threshold."
          echo "‚ö†Ô∏è Consider stopping unnecessary processes or increasing available memory."
        elif [ "$USED_PERCENTAGE" -gt "$memory_threshold_warning" ]; then
          echo "‚ö†Ô∏è Warning: Memory usage is high ($USED_PERCENTAGE%), exceeding ${memory_threshold_warning}%."
        else
          echo "‚úÖ Memory usage is within safe limits ($USED_PERCENTAGE%)."
        fi
    
        # Store memory usage warning as an environment variable for later steps
        echo "MEMORY_WARNING=$USED_PERCENTAGE" >> $GITHUB_ENV

        
    - name: Clean up (optional)
      shell: bash
      run: |
        rm -f ./testfile
