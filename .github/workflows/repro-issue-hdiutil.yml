name: Reproduce hdiutil Resource Busy Error (Heavy Test with Large Files)

on:
  workflow_dispatch:

jobs:
  create-dmg-parallel:
    runs-on: macos-13

    strategy:
      fail-fast: false  # Ensures all jobs run even if one fails
      matrix:
        job_index: [1, 2, 3]  # Run 3 jobs in parallel

    steps:
      # Step 1: Create a large dummy .app structure to simulate Xcode-like application size
      - name: Prepare large and complex dummy .app structure
        run: |
          mkdir -p dist/XcodeDummy.app/Contents/Developer/Applications  # Create nested structure
          
          # Add a large binary file (100MB) to simulate a voluminous app
          dd if=/dev/urandom of=dist/XcodeDummy.app/Contents/LargeBinary bs=10M count=10

          # Add additional nested directories to increase complexity
          for i in {1..5}; do
            mkdir -p dist/XcodeDummy.app/Contents/Resources/Folder$i
            dd if=/dev/urandom of=dist/XcodeDummy.app/Contents/Resources/Folder$i/BigFile bs=10M count=5
          done
          
          echo "<?xml version='1.0'?>" > dist/XcodeDummy.app/Contents/Info.plist  # Minimal plist

      # Step 2: Simulate disk I/O by attaching multiple DMGs concurrently
      - name: Attach multiple dummy DMGs to create resource contention
        run: |
          mkdir -p temp_mount
          for i in {1..5}; do
            mkdir -p "temp_mount/disk$i"
            dd if=/dev/urandom of="temp_mount/disk$i/LargeFile" bs=50M count=2  # Each DMG with 100MB of random data
            hdiutil create -volname "DummyVol$i" -srcfolder "temp_mount/disk$i" -ov -format UDZO "dummy_vol$i.dmg"
            hdiutil attach "dummy_vol$i.dmg" || true  # Attach the DMG to simulate mounted volumes
          done

      # Step 3: Attempt to create the main DMG with retry logic
      - name: Attempt to create the real DMG with retries
        run: |
          mkdir -p dist/dmg
          APP_NAME="XcodeDummy"
          APP_PATH="dist/${APP_NAME}.app"
          DMG_PATH="dist/dmg/${APP_NAME}-${{ matrix.job_index }}.dmg"

          max_tries=10
          i=0
          # Retry loop for hdiutil with error handling
          until hdiutil create -volname "$APP_NAME" -srcfolder "$APP_PATH" -ov -format UDZO "$DMG_PATH"; do
            echo "Attempt $i failed" >> create_dmg.log  # Log each failed attempt
            if [ $i -eq $max_tries ]; then
              echo "hdiutil failed after $max_tries retries" >> create_dmg.log
              exit 1
            fi
            ((i++))
            sleep 2  # Wait before retrying
          done
          echo "DMG created successfully on attempt $i" >> create_dmg.log

      # Step 4: Upload logs and DMG output for analysis
      - name: Upload logs and DMG
        if: always()  # Run even if previous steps failed
        uses: actions/upload-artifact@v4  # Use the latest stable version
        with:
          name: dmg-output-job-${{ matrix.job_index }}
          path: |
            create_dmg.log
            dist/dmg/*.dmg
